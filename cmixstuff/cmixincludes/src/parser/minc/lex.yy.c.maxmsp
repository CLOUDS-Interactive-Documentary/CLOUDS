/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /musr/rtcmix.cvs/RTcmix/src/parser/minc/lex.yy.c.maxmsp,v 1.1 2013/01/14 20:30:10 bgarton Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>

// BGG mm
char *thebuf;
int thelen;
int bpointer;


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define mm_yyconst const
#else
#define mm_yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN mm_yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((mm_yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE mm_yyrestart( mm_yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct mm_yy_buffer_state *YY_BUFFER_STATE;

extern int mm_yyleng;
extern FILE *mm_yyin, *mm_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		mm_yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the mm_yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define mm_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up mm_yytext. */ \
		*mm_yy_cp = mm_yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		mm_yy_c_buf_p = mm_yy_cp = mm_yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up mm_yytext again */ \
		} \
	while ( 0 )

#define unput(c) mm_yyunput( c, mm_yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int mm_yy_size_t;


struct mm_yy_buffer_state
	{
	FILE *mm_yy_input_file;

	char *mm_yy_ch_buf;		/* input buffer */
	char *mm_yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	mm_yy_size_t mm_yy_buf_size;

	/* Number of characters read into mm_yy_ch_buf, not including EOB
	 * characters.
	 */
	int mm_yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int mm_yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int mm_yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int mm_yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int mm_yy_fill_buffer;

	int mm_yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via mm_yyrestart()), so that the user can continue scanning by
	 * just pointing mm_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE mm_yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER mm_yy_current_buffer


/* mm_yy_hold_char holds the character lost when mm_yytext is formed. */
static char mm_yy_hold_char;

static int mm_yy_n_chars;		/* number of characters read into mm_yy_ch_buf */


int mm_yyleng;

/* Points to current character in buffer. */
static char *mm_yy_c_buf_p = (char *) 0;
static int mm_yy_init = 1;		/* whether we need to initialize */
static int mm_yy_start = 0;	/* start state number */

/* Flag which is used to allow mm_yywrap()'s to do buffer switches
 * instead of setting up a fresh mm_yyin.  A bit of a hack ...
 */
static int mm_yy_did_buffer_switch_on_eof;

void mm_yyrestart YY_PROTO(( FILE *input_file ));

void mm_yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void mm_yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE mm_yy_create_buffer YY_PROTO(( FILE *file, int size ));
void mm_yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void mm_yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void mm_yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER mm_yy_flush_buffer( mm_yy_current_buffer )

YY_BUFFER_STATE mm_yy_scan_buffer YY_PROTO(( char *base, mm_yy_size_t size ));
YY_BUFFER_STATE mm_yy_scan_string YY_PROTO(( mm_yyconst char *mm_yy_str ));
YY_BUFFER_STATE mm_yy_scan_bytes YY_PROTO(( mm_yyconst char *bytes, int len ));

static void *mm_yy_flex_alloc YY_PROTO(( mm_yy_size_t ));
static void *mm_yy_flex_realloc YY_PROTO(( void *, mm_yy_size_t ));
static void mm_yy_flex_free YY_PROTO(( void * ));

#define mm_yy_new_buffer mm_yy_create_buffer

#define mm_yy_set_interactive(is_interactive) \
	{ \
	if ( ! mm_yy_current_buffer ) \
		mm_yy_current_buffer = mm_yy_create_buffer( mm_yyin, YY_BUF_SIZE ); \
	mm_yy_current_buffer->mm_yy_is_interactive = is_interactive; \
	}

#define mm_yy_set_bol(at_bol) \
	{ \
	if ( ! mm_yy_current_buffer ) \
		mm_yy_current_buffer = mm_yy_create_buffer( mm_yyin, YY_BUF_SIZE ); \
	mm_yy_current_buffer->mm_yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (mm_yy_current_buffer->mm_yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *mm_yyin = (FILE *) 0, *mm_yyout = (FILE *) 0;
typedef int mm_yy_state_type;
#define YY_FLEX_LEX_COMPAT
extern int mm_yylineno;
int mm_yylineno = 1;
extern char mm_yytext[];


static mm_yy_state_type mm_yy_get_previous_state YY_PROTO(( void ));
static mm_yy_state_type mm_yy_try_NUL_trans YY_PROTO(( mm_yy_state_type current_state ));
static int mm_yy_get_next_buffer YY_PROTO(( void ));
static void mm_yy_fatal_error YY_PROTO(( mm_yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up mm_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	mm_yytext_ptr = mm_yy_bp; \
	mm_yyleng = (int) (mm_yy_cp - mm_yy_bp); \
	mm_yy_hold_char = *mm_yy_cp; \
	*mm_yy_cp = '\0'; \
	if ( mm_yyleng + mm_yy_more_offset >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	mm_yy_flex_strncpy( &mm_yytext[mm_yy_more_offset], mm_yytext_ptr, mm_yyleng + 1 ); \
	mm_yyleng += mm_yy_more_offset; \
	mm_yy_prev_more_offset = mm_yy_more_offset; \
	mm_yy_more_offset = 0; \
	mm_yy_c_buf_p = mm_yy_cp;

#define YY_NUM_RULES 53
#define YY_END_OF_BUFFER 54
static mm_yyconst short int mm_yy_acclist[276] =
    {   0,
       51,   51,   54,   50,   53,   50,   53,   48,   50,   53,
       45,   48,   50,   53,   44,   50,   53,   31,   48,   50,
       53,   48,   50,   53,    3,   48,   50,   53,   41,   48,
       50,   53,   48,   50,   53,   48,   50,   53,   43,   48,
       50,   53,   41,   48,   50,   53,   41,   48,   50,   53,
       41,   48,   50,   53,   48,   50,   53,   42,   48,   50,
       53,   11,   48,   50,   53,   41,   48,   50,   53,   41,
       48,   50,   53,   41,   48,   50,   53,   47,   48,   50,
       53,   47,   48,   50,   53,   47,   48,   50,   53,   42,
       48,   50,   53,   21,   48,   50,   53,   47,   48,   50,

       53,   47,   48,   50,   53,   47,   48,   50,   53,   47,
       48,   50,   53,   47,   48,   50,   53,   47,   48,   50,
       53,   47,   48,   50,   53,   47,   48,   50,   53,   47,
       48,   50,   53,   47,   48,   50,   53,   48,   50,   53,
       31,   48,   50,   53,   47,   48,   50,   53,    5,   50,
       53,    4,   50,   53,    5,   50,   53,    7,   50,   53,
        7,   50,   53,    7,   50,   53,    7,   50,   53,   10,
       50,   53,    9,   50,   53,   10,   50,   53,   52,   53,
       51,   53,   53,   13,   22,   29,   23,   21,   19,   17,
       18,   12,    1,    2,   20,   11,   11,   14,   16,   15,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   25,
       47,   47,   32,   47,   47,   47,   47,   33,   47,    8,
        6,   52,   51,   11,   47,   47,   28,   47,   47,   47,
       47,   24,   47,   47,   30,   47,   47,   47,   47,   47,
       12,   11,   47,   35,   47,   26,   47,   47,   47,   47,
       47,   34,   47,   47,   47,   37,   47,   36,   47,   38,
       47,   47,   47,   27,   47,   47,   40,   47,   39,   47,
       47,   49,   46,   47,   49
    } ;

static mm_yyconst short int mm_yy_accept[155] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    3,    4,    6,    8,   11,   15,   18,   22,
       25,   29,   33,   36,   39,   43,   47,   51,   55,   58,
       62,   66,   70,   74,   78,   82,   86,   90,   94,   98,
      102,  106,  110,  114,  118,  122,  126,  130,  134,  138,
      141,  145,  149,  152,  155,  158,  161,  164,  167,  170,
      173,  176,  179,  181,  183,  184,  184,  185,  185,  186,
      187,  187,  188,  189,  190,  191,  192,  193,  194,  195,
      196,  197,  198,  199,  200,  201,  202,  203,  204,  205,
      206,  207,  208,  209,  210,  212,  213,  215,  216,  217,

      218,  219,  220,  221,  222,  223,  224,  224,  224,  225,
      225,  226,  227,  229,  230,  231,  232,  234,  235,  237,
      238,  239,  240,  241,  241,  241,  242,  242,  243,  244,
      246,  248,  249,  250,  251,  252,  254,  255,  256,  256,
      258,  260,  262,  263,  264,  266,  267,  267,  269,  271,
      272,  273,  276,  276
    } ;

static mm_yyconst int mm_yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,   14,    8,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,    1,    8,   19,
       20,   21,    1,    1,   22,   23,   23,   23,   24,   25,
       23,   23,   23,   23,   23,   26,   23,   23,   23,   23,
       23,   27,   28,   29,   30,   23,   23,   23,   23,   23,
       31,    1,   32,   33,   34,    1,   35,   23,   36,   37,

       38,   39,   40,   41,   42,   23,   23,   43,   23,   44,
       45,   23,   23,   46,   47,   48,   49,   23,   50,   23,
       23,   23,    8,   51,    8,   52,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static mm_yyconst int mm_yy_meta[53] =
    {   0,
        1,    2,    2,    2,    1,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    1,    3,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        1,    1
    } ;

static mm_yyconst short int mm_yy_base[163] =
    {   0,
        0,  161,    0,  160,  198,   50,   41,   42,  197,   53,
       58,   61,  199,  204,  154,  204,  204,  204,  177,  190,
      204,  204,  186,  184,  204,   53,  173,  172,  173,   54,
       52,   55,  170,  169,    0,  166,  160,  204,  204,  142,
      142,   34,  149,  144,  137,  135,  132,  133,  137,  126,
      204,   39,  204,  204,  132,  204,  158,  161,  129,  204,
      204,  128,    0,   78,  204,  135,  204,  164,  204,  204,
      159,  204,  204,  204,  204,  204,   63,  204,  204,  204,
       67,   70,  204,  204,  204,    0,  142,  137,  129,  118,
      121,  118,  116,  117,    0,  112,    0,  113,  109,  115,

      204,  120,  204,  204,    0,   92,  112,   75,   79,   84,
      126,  129,    0,  114,  104,  115,    0,  112,    0,  106,
      109,  103,  102,   95,  125,  124,  122,   98,   91,    0,
        0,   76,   65,   69,   67,    0,   72,   60,   71,    0,
        0,    0,   69,   66,    0,   67,   62,    0,    0,   34,
      204,    0,  204,  117,  120,  123,  126,  129,  132,  135,
       54,  138
    } ;

static mm_yyconst short int mm_yy_def[163] =
    {   0,
      154,  154,  153,    3,  155,  155,  156,  156,  157,  157,
      158,  158,  153,  153,  153,  153,  153,  153,  153,  159,
      153,  153,  153,  160,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  161,  161,  161,  153,  153,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  153,
      153,  161,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  162,  153,  153,  153,  153,  159,  153,  153,
      160,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,

      153,  161,  153,  153,  162,  153,  153,  153,  153,  153,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  153,  153,  153,  153,  153,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  153,  161,
      161,  161,  161,  161,  161,  161,  153,  161,  161,  161,
      153,  161,    0,  153,  153,  153,  153,  153,  153,  153,
      153,  153
    } ;

static mm_yyconst short int mm_yy_nxt[257] =
    {   0,
       16,   17,   18,   17,   19,   20,   21,   22,   23,   24,
       25,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   35,   35,   36,   35,   35,   35,   37,   35,
       38,   38,   39,   16,   40,   35,   35,   41,   42,   35,
       43,   44,   35,   45,   46,   35,   47,   48,   35,   49,
       50,   51,   54,   57,   57,   61,   86,   58,   58,   64,
       65,   64,   64,   65,   64,   73,   78,   81,   91,   82,
       79,  152,   74,   80,   83,   67,   92,   95,   93,  106,
       77,  106,  102,   59,  109,   81,  108,   82,  125,  125,
      110,   55,  126,  106,   62,  106,  109,  127,  127,  151,

      108,  128,  110,  150,  110,  149,  148,  147,  146,  145,
      144,  143,  142,  141,  140,  128,  110,   14,   14,   14,
       53,   53,   53,   56,   56,   56,   60,   60,   60,   63,
       63,   63,   68,   68,   68,   71,   71,   71,  105,  128,
      105,  126,  126,  139,  138,  137,  136,  135,  134,  133,
      132,  131,  130,  129,  124,  123,  122,  121,  120,  119,
      118,  117,  116,  115,  114,  113,  112,  111,   72,   69,
      107,   66,   66,  104,  103,   66,  101,  100,   99,   98,
       97,   96,   95,   94,   90,   89,   88,   87,   85,   84,
       77,   76,   75,   72,   70,   69,   67,   66,  153,   61,

       54,   52,   15,   13,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153
    } ;

static mm_yyconst short int mm_yy_chk[257] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    6,    7,    8,   10,  161,    7,    8,   11,
       11,   11,   12,   12,   12,   26,   30,   31,   42,   31,
       30,  150,   26,   30,   32,   32,   42,   52,   42,   64,
       77,   64,   52,    8,   81,   82,   77,   82,  108,  108,
       81,    6,  108,  106,   10,  106,  109,  110,  110,  147,

       77,  110,  109,  146,   81,  144,  143,  139,  138,  137,
      135,  134,  133,  132,  129,  128,  109,  154,  154,  154,
      155,  155,  155,  156,  156,  156,  157,  157,  157,  158,
      158,  158,  159,  159,  159,  160,  160,  160,  162,  127,
      162,  126,  125,  124,  123,  122,  121,  120,  118,  116,
      115,  114,  112,  111,  107,  102,  100,   99,   98,   96,
       94,   93,   92,   91,   90,   89,   88,   87,   71,   68,
       66,   62,   59,   58,   57,   55,   50,   49,   48,   47,
       46,   45,   44,   43,   41,   40,   37,   36,   34,   33,
       29,   28,   27,   24,   23,   20,   19,   15,   13,    9,

        5,    4,    2,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153
    } ;

static mm_yy_state_type mm_yy_state_buf[YY_BUF_SIZE + 2], *mm_yy_state_ptr;
static char *mm_yy_full_match;
static int mm_yy_lp;
#define REJECT \
{ \
*mm_yy_cp = mm_yy_hold_char; /* undo effects of setting up mm_yytext */ \
mm_yy_cp = mm_yy_full_match; /* restore poss. backed-over text */ \
++mm_yy_lp; \
goto find_rule; \
}
static int mm_yy_more_offset = 0;
static int mm_yy_prev_more_offset = 0;
#define mm_yymore() (mm_yy_more_offset = mm_yy_flex_strlen( mm_yytext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	mm_yy_more_offset = mm_yy_prev_more_offset; \
	mm_yyleng -= mm_yy_more_offset; \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char mm_yytext[YYLMAX];
char *mm_yytext_ptr;
#line 1 "minc.l"
#define INITIAL 0
/* RTcmix  - Copyright (C) 2004  The RTcmix Development Team
   See ``AUTHORS'' for a list of contributors. See ``LICENSE'' for
   the license to this software and for a DISCLAIMER OF ALL WARRANTIES.
*/
#define INIT 1
#define IGNORE 2
#define COM 3
#define CPCOM 4

#define INCLUDE 5

#line 8 "minc.l"
#include "y.tab.h"
#define YY_ALWAYS_INTERACTIVE 1
static int comments = 0;
static int cpcomments = 0;
extern void mm_yyerror(char *);
/* To allow includes of subfiles */
#define MAX_INCLUDE_DEPTH 10
YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;
#line 553 "lex.mm_yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int mm_yywrap YY_PROTO(( void ));
#else
extern int mm_yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void mm_yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef mm_yytext_ptr
static void mm_yy_flex_strncpy YY_PROTO(( char *, mm_yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int mm_yy_flex_strlen YY_PROTO(( mm_yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int mm_yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int mm_yy_start_stack_ptr = 0;
static int mm_yy_start_stack_depth = 0;
static int *mm_yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void mm_yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void mm_yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int mm_yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( mm_yytext, mm_yyleng, 1, mm_yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT

// BGG mm
#define YY_INPUT(buf,result,max_size) \
	if ( mm_yy_current_buffer->mm_yy_is_interactive ) \
		{ \
		int  n; \
		for ( n = 0; n < max_size && bpointer < (thelen-1); n++) { \
			buf[n] = thebuf[bpointer++]; \
		} \
		result = n; \
		}

/* the original one
#define YY_INPUT(buf,result,max_size) \
	if ( mm_yy_current_buffer->mm_yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( mm_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( mm_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, mm_yyin )) == 0) \
		  && ferror( mm_yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
*/


#endif

/* No semi-colon after return; correct usage is to write "mm_yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef mm_yyterminate
#define mm_yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) mm_yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int mm_yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after mm_yytext and mm_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( mm_yyleng > 0 ) \
		mm_yy_current_buffer->mm_yy_at_bol = \
				(mm_yytext[mm_yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register mm_yy_state_type mm_yy_current_state;
	register char *mm_yy_cp, *mm_yy_bp;
	register int mm_yy_act;

#line 25 "minc.l"

#line 709 "lex.mm_yy.c"

	if ( mm_yy_init )
		{
		mm_yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! mm_yy_start )
			mm_yy_start = 1;	/* first start state */

		if ( ! mm_yyin )
			mm_yyin = stdin;

		if ( ! mm_yyout )
			mm_yyout = stdout;

		if ( ! mm_yy_current_buffer )
			mm_yy_current_buffer =
				mm_yy_create_buffer( mm_yyin, YY_BUF_SIZE );

		mm_yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		mm_yy_cp = mm_yy_c_buf_p;

		/* Support of mm_yytext. */
		*mm_yy_cp = mm_yy_hold_char;

		/* mm_yy_bp points to the position in mm_yy_ch_buf of the start of
		 * the current run.
		 */
		mm_yy_bp = mm_yy_cp;

		mm_yy_current_state = mm_yy_start;
		mm_yy_current_state += YY_AT_BOL();
		mm_yy_state_ptr = mm_yy_state_buf;
		*mm_yy_state_ptr++ = mm_yy_current_state;
mm_yy_match:
		do
			{
			register YY_CHAR mm_yy_c = mm_yy_ec[YY_SC_TO_UI(*mm_yy_cp)];
			while ( mm_yy_chk[mm_yy_base[mm_yy_current_state] + mm_yy_c] != mm_yy_current_state )
				{
				mm_yy_current_state = (int) mm_yy_def[mm_yy_current_state];
				if ( mm_yy_current_state >= 154 )
					mm_yy_c = mm_yy_meta[(unsigned int) mm_yy_c];
				}
			mm_yy_current_state = mm_yy_nxt[mm_yy_base[mm_yy_current_state] + (unsigned int) mm_yy_c];
			*mm_yy_state_ptr++ = mm_yy_current_state;
			++mm_yy_cp;
			}
		while ( mm_yy_base[mm_yy_current_state] != 204 );

mm_yy_find_action:
		mm_yy_current_state = *--mm_yy_state_ptr;
		mm_yy_lp = mm_yy_accept[mm_yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( mm_yy_lp && mm_yy_lp < mm_yy_accept[mm_yy_current_state + 1] )
				{
				mm_yy_act = mm_yy_acclist[mm_yy_lp];
					{
					mm_yy_full_match = mm_yy_cp;
					break;
					}
				}
			--mm_yy_cp;
			mm_yy_current_state = *--mm_yy_state_ptr;
			mm_yy_lp = mm_yy_accept[mm_yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( mm_yy_act != YY_END_OF_BUFFER )
			{
			int mm_yyl;
			for ( mm_yyl = 0; mm_yyl < mm_yyleng; ++mm_yyl )
				if ( mm_yytext[mm_yyl] == '\n' )
					++mm_yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( mm_yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 26 "minc.l"
{ BEGIN COM; comments++; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 27 "minc.l"
{ BEGIN CPCOM; cpcomments = 1; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 28 "minc.l"
{ BEGIN IGNORE; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 29 "minc.l"
{ BEGIN INIT; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 30 "minc.l"
;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 31 "minc.l"
{ comments++; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 32 "minc.l"
;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 33 "minc.l"
{ comments--; if (comments == 0 && !cpcomments) { BEGIN INIT; } }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 34 "minc.l"
{ cpcomments = 0; if (comments == 0) { BEGIN INIT; } }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 35 "minc.l"
;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 36 "minc.l"
return TOK_NUM;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 37 "minc.l"
return TOK_NUM;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 38 "minc.l"
return TOK_UNEQU;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 39 "minc.l"
return TOK_LESSEQU;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 40 "minc.l"
return TOK_GTREQU;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 41 "minc.l"
return TOK_EQU;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 42 "minc.l"
return TOK_PLUSEQU;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 43 "minc.l"
return TOK_MINUSEQU;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 44 "minc.l"
return TOK_MULEQU;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 45 "minc.l"
return TOK_DIVEQU;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 46 "minc.l"
return TOK_POW;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 47 "minc.l"
return TOK_STRING;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 48 "minc.l"
return TOK_STRING;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 49 "minc.l"
return TOK_FOR;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 50 "minc.l"
return TOK_IF;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 51 "minc.l"
return TOK_ELSE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 52 "minc.l"
return TOK_WHILE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 53 "minc.l"
return TOK_AND;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 54 "minc.l"
return TOK_AND;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 55 "minc.l"
return TOK_NOT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 56 "minc.l"
return TOK_NOT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 57 "minc.l"
return TOK_OR;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 58 "minc.l"
return TOK_OR;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 59 "minc.l"
return TOK_TRUE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 60 "minc.l"
return TOK_TRUE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 61 "minc.l"
return TOK_FALSE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 62 "minc.l"
return TOK_FALSE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 63 "minc.l"
return TOK_FLOAT_DECL;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 64 "minc.l"
return TOK_STRING_DECL;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 65 "minc.l"
return TOK_HANDLE_DECL;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 66 "minc.l"
return (*mm_yytext);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 67 "minc.l"
return (*mm_yytext);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 68 "minc.l"
return (*mm_yytext);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 69 "minc.l"
;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 70 "minc.l"
;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 71 "minc.l"
{ BEGIN INCLUDE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 72 "minc.l"
return TOK_IDENT;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 73 "minc.l"
mm_yyerror("invalid character");
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 74 "minc.l"
{ BEGIN INCLUDE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 75 "minc.l"
{ BEGIN INIT; unput(mm_yytext[0]); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 76 "minc.l"
/* eat the whitespace */
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 77 "minc.l"
{ /* got the include file name */
			if (include_stack_ptr >= MAX_INCLUDE_DEPTH)
			{
				mm_yyerror( "Includes nested too deeply");
				exit(1);
			}
			include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;
			mm_yyin = fopen( mm_yytext, "r" );
			if (!mm_yyin)
			{
				char msg[1024];
				snprintf(msg, 1024, "Unable to open include file \"%s\"",
						 mm_yytext);
				mm_yyerror(msg);
				exit(1);
			}
			mm_yy_switch_to_buffer(mm_yy_create_buffer(mm_yyin, YY_BUF_SIZE));
			BEGIN INIT;
		}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(INIT):
case YY_STATE_EOF(IGNORE):
case YY_STATE_EOF(COM):
case YY_STATE_EOF(CPCOM):
case YY_STATE_EOF(INCLUDE):
#line 97 "minc.l"
{	if (--include_stack_ptr < 0)
			{
				mm_yyterminate();
			}
			else {
				mm_yy_delete_buffer(YY_CURRENT_BUFFER);
				mm_yy_switch_to_buffer(include_stack[include_stack_ptr]);
			}
		} 
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 106 "minc.l"
ECHO;
	YY_BREAK
#line 1101 "lex.mm_yy.c"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int mm_yy_amount_of_matched_text = (int) (mm_yy_cp - mm_yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*mm_yy_cp = mm_yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( mm_yy_current_buffer->mm_yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed mm_yyin at a new source and called
			 * mm_yylex().  If so, then we have to assure
			 * consistency between mm_yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			mm_yy_n_chars = mm_yy_current_buffer->mm_yy_n_chars;
			mm_yy_current_buffer->mm_yy_input_file = mm_yyin;
			mm_yy_current_buffer->mm_yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for mm_yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since mm_yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( mm_yy_c_buf_p <= &mm_yy_current_buffer->mm_yy_ch_buf[mm_yy_n_chars] )
			{ /* This was really a NUL. */
			mm_yy_state_type mm_yy_next_state;

			mm_yy_c_buf_p = mm_yytext_ptr + mm_yy_amount_of_matched_text;

			mm_yy_current_state = mm_yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * mm_yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			mm_yy_next_state = mm_yy_try_NUL_trans( mm_yy_current_state );

			mm_yy_bp = mm_yytext_ptr + YY_MORE_ADJ;

			if ( mm_yy_next_state )
				{
				/* Consume the NUL. */
				mm_yy_cp = ++mm_yy_c_buf_p;
				mm_yy_current_state = mm_yy_next_state;
				goto mm_yy_match;
				}

			else
				{
				mm_yy_cp = mm_yy_c_buf_p;
				goto mm_yy_find_action;
				}
			}

		else switch ( mm_yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				mm_yy_did_buffer_switch_on_eof = 0;

				if ( mm_yywrap() )
					{
					/* Note: because we've taken care in
					 * mm_yy_get_next_buffer() to have set up
					 * mm_yytext, we can now set up
					 * mm_yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					mm_yy_c_buf_p = mm_yytext_ptr + YY_MORE_ADJ;

					mm_yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! mm_yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				mm_yy_c_buf_p =
					mm_yytext_ptr + mm_yy_amount_of_matched_text;

				mm_yy_current_state = mm_yy_get_previous_state();

				mm_yy_cp = mm_yy_c_buf_p;
				mm_yy_bp = mm_yytext_ptr + YY_MORE_ADJ;
				goto mm_yy_match;

			case EOB_ACT_LAST_MATCH:
				mm_yy_c_buf_p =
				&mm_yy_current_buffer->mm_yy_ch_buf[mm_yy_n_chars];

				mm_yy_current_state = mm_yy_get_previous_state();

				mm_yy_cp = mm_yy_c_buf_p;
				mm_yy_bp = mm_yytext_ptr + YY_MORE_ADJ;
				goto mm_yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of mm_yylex */


/* mm_yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int mm_yy_get_next_buffer()
	{
	register char *dest = mm_yy_current_buffer->mm_yy_ch_buf;
	register char *source = mm_yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( mm_yy_c_buf_p > &mm_yy_current_buffer->mm_yy_ch_buf[mm_yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( mm_yy_current_buffer->mm_yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( mm_yy_c_buf_p - mm_yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (mm_yy_c_buf_p - mm_yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( mm_yy_current_buffer->mm_yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		mm_yy_current_buffer->mm_yy_n_chars = mm_yy_n_chars = 0;

	else
		{
		int num_to_read =
			mm_yy_current_buffer->mm_yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = mm_yy_current_buffer;

			int mm_yy_c_buf_p_offset =
				(int) (mm_yy_c_buf_p - b->mm_yy_ch_buf);

			if ( b->mm_yy_is_our_buffer )
				{
				int new_size = b->mm_yy_buf_size * 2;

				if ( new_size <= 0 )
					b->mm_yy_buf_size += b->mm_yy_buf_size / 8;
				else
					b->mm_yy_buf_size *= 2;

				b->mm_yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					mm_yy_flex_realloc( (void *) b->mm_yy_ch_buf,
							 b->mm_yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->mm_yy_ch_buf = 0;

			if ( ! b->mm_yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			mm_yy_c_buf_p = &b->mm_yy_ch_buf[mm_yy_c_buf_p_offset];

			num_to_read = mm_yy_current_buffer->mm_yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&mm_yy_current_buffer->mm_yy_ch_buf[number_to_move]),
			mm_yy_n_chars, num_to_read );

		mm_yy_current_buffer->mm_yy_n_chars = mm_yy_n_chars;
		}

	if ( mm_yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			mm_yyrestart( mm_yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			mm_yy_current_buffer->mm_yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	mm_yy_n_chars += number_to_move;
	mm_yy_current_buffer->mm_yy_ch_buf[mm_yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	mm_yy_current_buffer->mm_yy_ch_buf[mm_yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	mm_yytext_ptr = &mm_yy_current_buffer->mm_yy_ch_buf[0];

	return ret_val;
	}


/* mm_yy_get_previous_state - get the state just before the EOB char was reached */

static mm_yy_state_type mm_yy_get_previous_state()
	{
	register mm_yy_state_type mm_yy_current_state;
	register char *mm_yy_cp;

	mm_yy_current_state = mm_yy_start;
	mm_yy_current_state += YY_AT_BOL();
	mm_yy_state_ptr = mm_yy_state_buf;
	*mm_yy_state_ptr++ = mm_yy_current_state;

	for ( mm_yy_cp = mm_yytext_ptr + YY_MORE_ADJ; mm_yy_cp < mm_yy_c_buf_p; ++mm_yy_cp )
		{
		register YY_CHAR mm_yy_c = (*mm_yy_cp ? mm_yy_ec[YY_SC_TO_UI(*mm_yy_cp)] : 1);
		while ( mm_yy_chk[mm_yy_base[mm_yy_current_state] + mm_yy_c] != mm_yy_current_state )
			{
			mm_yy_current_state = (int) mm_yy_def[mm_yy_current_state];
			if ( mm_yy_current_state >= 154 )
				mm_yy_c = mm_yy_meta[(unsigned int) mm_yy_c];
			}
		mm_yy_current_state = mm_yy_nxt[mm_yy_base[mm_yy_current_state] + (unsigned int) mm_yy_c];
		*mm_yy_state_ptr++ = mm_yy_current_state;
		}

	return mm_yy_current_state;
	}


/* mm_yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = mm_yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static mm_yy_state_type mm_yy_try_NUL_trans( mm_yy_state_type mm_yy_current_state )
#else
static mm_yy_state_type mm_yy_try_NUL_trans( mm_yy_current_state )
mm_yy_state_type mm_yy_current_state;
#endif
	{
	register int mm_yy_is_jam;

	register YY_CHAR mm_yy_c = 1;
	while ( mm_yy_chk[mm_yy_base[mm_yy_current_state] + mm_yy_c] != mm_yy_current_state )
		{
		mm_yy_current_state = (int) mm_yy_def[mm_yy_current_state];
		if ( mm_yy_current_state >= 154 )
			mm_yy_c = mm_yy_meta[(unsigned int) mm_yy_c];
		}
	mm_yy_current_state = mm_yy_nxt[mm_yy_base[mm_yy_current_state] + (unsigned int) mm_yy_c];
	mm_yy_is_jam = (mm_yy_current_state == 153);
	if ( ! mm_yy_is_jam )
		*mm_yy_state_ptr++ = mm_yy_current_state;

	return mm_yy_is_jam ? 0 : mm_yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void mm_yyunput( int c, register char *mm_yy_bp )
#else
static void mm_yyunput( c, mm_yy_bp )
int c;
register char *mm_yy_bp;
#endif
	{
	register char *mm_yy_cp = mm_yy_c_buf_p;

	/* undo effects of setting up mm_yytext */
	*mm_yy_cp = mm_yy_hold_char;

	if ( mm_yy_cp < mm_yy_current_buffer->mm_yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = mm_yy_n_chars + 2;
		register char *dest = &mm_yy_current_buffer->mm_yy_ch_buf[
					mm_yy_current_buffer->mm_yy_buf_size + 2];
		register char *source =
				&mm_yy_current_buffer->mm_yy_ch_buf[number_to_move];

		while ( source > mm_yy_current_buffer->mm_yy_ch_buf )
			*--dest = *--source;

		mm_yy_cp += (int) (dest - source);
		mm_yy_bp += (int) (dest - source);
		mm_yy_current_buffer->mm_yy_n_chars =
			mm_yy_n_chars = mm_yy_current_buffer->mm_yy_buf_size;

		if ( mm_yy_cp < mm_yy_current_buffer->mm_yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--mm_yy_cp = (char) c;

	if ( c == '\n' )
		--mm_yylineno;

	mm_yytext_ptr = mm_yy_bp;
	mm_yy_hold_char = *mm_yy_cp;
	mm_yy_c_buf_p = mm_yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int mm_yyinput()
#else
static int input()
#endif
	{
	int c;

	*mm_yy_c_buf_p = mm_yy_hold_char;

	if ( *mm_yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* mm_yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( mm_yy_c_buf_p < &mm_yy_current_buffer->mm_yy_ch_buf[mm_yy_n_chars] )
			/* This was really a NUL. */
			*mm_yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = mm_yy_c_buf_p - mm_yytext_ptr;
			++mm_yy_c_buf_p;

			switch ( mm_yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because mm_yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					mm_yyrestart( mm_yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( mm_yywrap() )
						return EOF;

					if ( ! mm_yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return mm_yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					mm_yy_c_buf_p = mm_yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) mm_yy_c_buf_p;	/* cast for 8-bit char's */
	*mm_yy_c_buf_p = '\0';	/* preserve mm_yytext */
	mm_yy_hold_char = *++mm_yy_c_buf_p;

	mm_yy_current_buffer->mm_yy_at_bol = (c == '\n');
	if ( mm_yy_current_buffer->mm_yy_at_bol )
		++mm_yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void mm_yyrestart( FILE *input_file )
#else
void mm_yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! mm_yy_current_buffer )
		mm_yy_current_buffer = mm_yy_create_buffer( mm_yyin, YY_BUF_SIZE );

	mm_yy_init_buffer( mm_yy_current_buffer, input_file );
	mm_yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void mm_yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void mm_yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( mm_yy_current_buffer == new_buffer )
		return;

	if ( mm_yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*mm_yy_c_buf_p = mm_yy_hold_char;
		mm_yy_current_buffer->mm_yy_buf_pos = mm_yy_c_buf_p;
		mm_yy_current_buffer->mm_yy_n_chars = mm_yy_n_chars;
		}

	mm_yy_current_buffer = new_buffer;
	mm_yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (mm_yywrap()) processing, but the only time this flag
	 * is looked at is after mm_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	mm_yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void mm_yy_load_buffer_state( void )
#else
void mm_yy_load_buffer_state()
#endif
	{
	mm_yy_n_chars = mm_yy_current_buffer->mm_yy_n_chars;
	mm_yytext_ptr = mm_yy_c_buf_p = mm_yy_current_buffer->mm_yy_buf_pos;
	mm_yyin = mm_yy_current_buffer->mm_yy_input_file;
	mm_yy_hold_char = *mm_yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE mm_yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE mm_yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) mm_yy_flex_alloc( sizeof( struct mm_yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in mm_yy_create_buffer()" );

	b->mm_yy_buf_size = size;

	/* mm_yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->mm_yy_ch_buf = (char *) mm_yy_flex_alloc( b->mm_yy_buf_size + 2 );
	if ( ! b->mm_yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in mm_yy_create_buffer()" );

	b->mm_yy_is_our_buffer = 1;

	mm_yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void mm_yy_delete_buffer( YY_BUFFER_STATE b )
#else
void mm_yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == mm_yy_current_buffer )
		mm_yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->mm_yy_is_our_buffer )
		mm_yy_flex_free( (void *) b->mm_yy_ch_buf );

	mm_yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void mm_yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void mm_yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	mm_yy_flush_buffer( b );

	b->mm_yy_input_file = file;
	b->mm_yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->mm_yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->mm_yy_is_interactive = 0;
#else
	b->mm_yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void mm_yy_flush_buffer( YY_BUFFER_STATE b )
#else
void mm_yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->mm_yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->mm_yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->mm_yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->mm_yy_buf_pos = &b->mm_yy_ch_buf[0];

	b->mm_yy_at_bol = 1;
	b->mm_yy_buffer_status = YY_BUFFER_NEW;

	if ( b == mm_yy_current_buffer )
		mm_yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE mm_yy_scan_buffer( char *base, mm_yy_size_t size )
#else
YY_BUFFER_STATE mm_yy_scan_buffer( base, size )
char *base;
mm_yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) mm_yy_flex_alloc( sizeof( struct mm_yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in mm_yy_scan_buffer()" );

	b->mm_yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->mm_yy_buf_pos = b->mm_yy_ch_buf = base;
	b->mm_yy_is_our_buffer = 0;
	b->mm_yy_input_file = 0;
	b->mm_yy_n_chars = b->mm_yy_buf_size;
	b->mm_yy_is_interactive = 0;
	b->mm_yy_at_bol = 1;
	b->mm_yy_fill_buffer = 0;
	b->mm_yy_buffer_status = YY_BUFFER_NEW;

	mm_yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE mm_yy_scan_string( mm_yyconst char *mm_yy_str )
#else
YY_BUFFER_STATE mm_yy_scan_string( mm_yy_str )
mm_yyconst char *mm_yy_str;
#endif
	{
	int len;
	for ( len = 0; mm_yy_str[len]; ++len )
		;

	return mm_yy_scan_bytes( mm_yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE mm_yy_scan_bytes( mm_yyconst char *bytes, int len )
#else
YY_BUFFER_STATE mm_yy_scan_bytes( bytes, len )
mm_yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	mm_yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) mm_yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in mm_yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = mm_yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in mm_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->mm_yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void mm_yy_push_state( int new_state )
#else
static void mm_yy_push_state( new_state )
int new_state;
#endif
	{
	if ( mm_yy_start_stack_ptr >= mm_yy_start_stack_depth )
		{
		mm_yy_size_t new_size;

		mm_yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = mm_yy_start_stack_depth * sizeof( int );

		if ( ! mm_yy_start_stack )
			mm_yy_start_stack = (int *) mm_yy_flex_alloc( new_size );

		else
			mm_yy_start_stack = (int *) mm_yy_flex_realloc(
					(void *) mm_yy_start_stack, new_size );

		if ( ! mm_yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	mm_yy_start_stack[mm_yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void mm_yy_pop_state()
	{
	if ( --mm_yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(mm_yy_start_stack[mm_yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int mm_yy_top_state()
	{
	return mm_yy_start_stack[mm_yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void mm_yy_fatal_error( mm_yyconst char msg[] )
#else
static void mm_yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine mm_yyless() so it works in section 3 code. */

#undef mm_yyless
#define mm_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up mm_yytext. */ \
		mm_yytext[mm_yyleng] = mm_yy_hold_char; \
		mm_yy_c_buf_p = mm_yytext + n; \
		mm_yy_hold_char = *mm_yy_c_buf_p; \
		*mm_yy_c_buf_p = '\0'; \
		mm_yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef mm_yytext_ptr
#ifdef YY_USE_PROTOS
static void mm_yy_flex_strncpy( char *s1, mm_yyconst char *s2, int n )
#else
static void mm_yy_flex_strncpy( s1, s2, n )
char *s1;
mm_yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int mm_yy_flex_strlen( mm_yyconst char *s )
#else
static int mm_yy_flex_strlen( s )
mm_yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *mm_yy_flex_alloc( mm_yy_size_t size )
#else
static void *mm_yy_flex_alloc( size )
mm_yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *mm_yy_flex_realloc( void *ptr, mm_yy_size_t size )
#else
static void *mm_yy_flex_realloc( ptr, size )
void *ptr;
mm_yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void mm_yy_flex_free( void *ptr )
#else
static void mm_yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	mm_yylex();
	return 0;
	}
#endif
#line 106 "minc.l"


