/* RTcmix  - Copyright (C) 2004  The RTcmix Development Team
   See ``AUTHORS'' for a list of contributors. See ``LICENSE'' for
   the license to this software and for a DISCLAIMER OF ALL WARRANTIES.
*/
/* Simple configuration file reader, based on RTcmix Minc code and
   examples in bison documentation.      -JGG, 6/25/04
*/
%{
#include <string.h>
#include <math.h>
#include "Config.h"
#include "lex.conf.c"
#include "yystype.h"
#define YYDEBUG 1
#define YYPARSE_PARAM obj
static char *my_strdup(const char *src);
int conferror(char *msg);
%}

/* This makes the parser reentrant, and allows us to pass a pointer to
   the Config object into confparse (i.e., yyparse).  Don't care about
   reentrancy, but the object pointer is essential.  Doing this also
   requires the YYPARSE_PARAM define above and the YY_DECL define in
   conf.l.
*/
%pure_parser

%token <num> TOK_NUM TOK_TRUE TOK_FALSE
%token <str> TOK_KEY TOK_STRING
%left '-' '+'
%left '*' '/'
%left NEG
%right '^'
%type  <num> stml stmt exp
%type  <str> key str
%type  <val> bool

%%
// program (the "start symbol")
prog: | stml         { return 0; }
   ;
 
// statement list
stml: stmt           { $$ = $1; }
   | stmt ';'        { $$ = $1; }
   | stml stmt       { $$ = $1; }
   | stml stmt ';'   { $$ = $1; }
   ;

// assignment statements
stmt: key '=' exp    { $$ = ((Config *) obj)->setValue($1, $3); }
   | key '=' str     { $$ = ((Config *) obj)->setValue($1, $3); }
   | key '=' bool    { $$ = ((Config *) obj)->setValue($1, $3); }
   | key '=' key     { $$ = -1; fprintf(stderr,
                                        "Config: Strings must be quoted.\n"); }
   ;

// key string
key: TOK_KEY         { $$ = my_strdup(conftext); }
   ;

// expression list
exp: TOK_NUM         { $$ = atof(conftext); }
   | exp '+' exp     { $$ = $1 + $3; }
   | exp '-' exp     { $$ = $1 - $3; }
   | exp '*' exp     { $$ = $1 * $3; }
   | exp '/' exp     { $$ = $1 / $3; }
   | '-' exp %prec NEG { $$ = -$2; }
   | exp '^' exp     { $$ = pow($1, $3); }
   | '(' exp ')'     { $$ = $2; }
   ;

bool: TOK_TRUE       { $$ = true; }
   |  TOK_FALSE      { $$ = false; }
   ;

// value string, in quotes
str: TOK_STRING      {
                        char *s = conftext + 1;    // strip quotes
                        s[strlen(s) - 1] = '\0';
                        $$ = my_strdup(s);
                     }
   ;

%%

static char *
my_strdup(const char *src)
{
   size_t len = strlen(src);
   char *dest = new char[len + 1];
   strcpy(dest, src);
   return dest;
}

int
conferror(char *msg)
{
   fprintf(stderr, "near line %d: %s\n", conflineno, msg);
   return 0;
}

int confwrap() { return 1; }

